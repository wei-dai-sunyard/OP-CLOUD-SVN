<?xml version="1.0" encoding="UTF-8"?>
<!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--属性：定义日志文件的存储地址 建议在LogBack的配置中使用绝对路径-->
    <property name="LOG_PATH" value="./logs"/>

    <!--<encoder>表示对日志进行编码
        %d{HH: mm:ss.SSS}——日志输出时间
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
        %-5level——日志级别，并且使用5个字符靠左对齐
        %logger{36}——日志输出者的名字
        %msg——日志消息
        %n——平台的换行符-->
    <!-- 1.控制台输出配置-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 2.ErrorLog日志输出配置-->
    <appender name="ErrorConfig" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/ErrorLog.log</file> <!-- 日志名称 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/logs/Error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>  <!-- 日志文件过大会使的编辑器打开慢，因此设置日志最大100MB -->
            <maxHistory>30</maxHistory>  <!-- 保存30天 -->
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 过滤器，可以过滤掉不符合条件的日志，INFO及以上的日志被处理，其它的拒绝 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 3.AllLog日志输出配置-->
    <appender name="AllConfig" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/AllLog.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/logs/All.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--过滤器，可以过滤掉不符合条件的日志，INFO及以上的日志被处理，其它的拒绝-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
    -->
    <logger name="org.springframework" level="ERROR"/>
    <logger name="org.apache" level="ERROR"/>
    <logger name="org.jboss" level="ERROR"/>
    <logger name="org.hibernate" level="ERROR"/>
    <!--<contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">-->
    <!--<resetJUL>true</resetJUL>-->
    <!--</contextListener>-->
    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。-->
    <!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
     默认是DEBUG。
     可以包含零个或多个元素，标识这个appender将会添加到这个logger。-->

    <!-- springProfile多环境日志输出，据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出
    <springProfile name="prod">   </springProfile> 这个标签套在以下root节点外
    可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：
    java -jar xxx.jar –spring.profiles.active=prod-->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ErrorConfig"/>
        <appender-ref ref="AllConfig"/>
    </root>
</configuration>